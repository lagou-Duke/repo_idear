<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="com.lagou.dao.UserMapper">



    <!--        分页查询 & 多条件查询-->
    <select id="findAllUserByPage" resultType="com.lagou.domain.User" parameterType="com.lagou.domain.UserVO">
            SELECT
            id,
            NAME,
            portrait,
            phone,
            PASSWORD,
            STATUS,
            create_time
            FROM USER
        <where>
            <if test="true">
                and is_del != 1
            </if>
            <if test="username != null">
                and name = #{username}
            </if>
            <if test="startCreateTime != null and endCreateTime != null">
            and create_time BETWEEN #{startCreateTime} AND #{endCreateTime}
            </if>
        </where>
    </select>

<!--    修改状态-->
    <update id="updateUserStatus">
        UPDATE USER SET STATUS = #{status} where id = #{id};
    </update>


<!--    用户登录-->
    <select id="login" parameterType="com.lagou.domain.User" resultType="com.lagou.domain.User">
        select * from user where  phone = #{phone}
    </select>


<!--    根据ID查询用户当前角色  public List<Role> findUserRelationRoleById(int id);-->
    <select id="findUserRelationRoleById" resultType="com.lagou.domain.Role" parameterType="int">
        SELECT
            r.id,
            r.code,
            r.name,
            r.description
        FROM roles r INNER JOIN user_role_relation ur
        ON r.`id` = ur.`role_id` INNER JOIN USER u ON ur.`user_id` = u.`id`
        WHERE u.`id` = #{id}

    </select>


<!--    根据userid清空中间表关联关系-->
    <delete id="deleteUserContextRole" parameterType="int">
         delete from user_role_relation where user_id = #{userid}
    </delete>

<!--    用户角色关联-->

    <insert id="userContextRole" parameterType="com.lagou.domain.User_Role_relation">
        insert into user_role_relation values(null,#{userId},#{roleId},
        #{createdTime},#{updatedTime},#{createdBy},#{updatedby})

    </insert>


<!--    1、根据用户id查询 角色信息   复用上方的方法 findUserRelationRoleById-->
<!--    2、根据角色id（多个角色），查询父级菜单-->
        <select id="findParentMenuByRoleId" parameterType="java.util.List" resultType="com.lagou.domain.Menu">
            SELECT
            DISTINCT m.*
            FROM
            roles r INNER JOIN role_menu_relation rm ON r.id = rm.role_id
            INNER JOIN menu m ON m.id =rm.menu_id
            WHERE
                m.parent_id = -1 AND r.id IN
            <foreach collection="list" item="item" open="(" separator="," close=")">
                #{item}
            </foreach>

    </select>


<!--    3、根据父级菜单 查询子级菜单-->
    <select id="findSubMenuByPid" resultType="com.lagou.domain.Menu">
        select * from menu where parent_id = #{pid}
    </select>
<!--    4、查询用户对应的资源信息-->
    <select id="findResourceByRoleId" parameterType="java.util.List"
            resultType="com.lagou.domain.Resource">
        SELECT
        DISTINCT rc.*
        FROM roles r INNER JOIN role_resource_relation rrr ON r.`id` =
        rrr.`role_id`
        INNER JOIN resource rc ON rrr.`resource_id` = rc.`id` WHERE r.id IN
        <foreach item="item" index="index" collection="list" open="("
                 separator="," close=")">
            #{item}
        </foreach>
        GROUP BY rc.id;
    </select>

<!--    向数据库中插入用户-->
    <insert id="add" parameterType="com.lagou.domain.User">
        insert into User(name,portrait,phone,password,reg_ip,account_non_expired,
        credentials_non_expired,account_non_locked,status,is_del,create_time,update_time)
        values (#{name},#{portrait},#{phone},#{password},#{reg_ip},#{account_non_expired},#{credentials_non_expired},
        #{account_non_locked},#{status},#{is_del},#{create_time},#{update_time})
    </insert>
</mapper>